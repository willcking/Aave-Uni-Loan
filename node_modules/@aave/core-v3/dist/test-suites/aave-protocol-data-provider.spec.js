"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hardhat_1 = __importDefault(require("hardhat"));
const chai_1 = require("chai");
const make_suite_1 = require("./helpers/make-suite");
const deploy_v3_1 = require("@aave/deploy-v3");
const contracts_helpers_1 = require("../helpers/contracts-helpers");
(0, make_suite_1.makeSuite)('AaveProtocolDataProvider: Edge cases', (testEnv) => {
    const MKR_ADDRESS = '0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2';
    const ETH_ADDRESS = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';
    it('getAllReservesTokens() with MKR and ETH as symbols', async () => {
        const { addressesProvider, poolAdmin, helpersContract } = testEnv;
        const { deployer } = await hardhat_1.default.getNamedAccounts();
        // Deploy a mock Pool
        const mockPool = await hardhat_1.default.deployments.deploy('MockPool', { from: deployer });
        const poolProxyAddress = await addressesProvider.getPool();
        const oldPoolImpl = await (0, contracts_helpers_1.getProxyImplementation)(addressesProvider.address, poolProxyAddress);
        // Update the addressesProvider with a mock pool
        await (0, chai_1.expect)(addressesProvider.connect(poolAdmin.signer).setPoolImpl(mockPool.address))
            .to.emit(addressesProvider, 'PoolUpdated')
            .withArgs(oldPoolImpl, mockPool.address);
        // Add MKR and ETH addresses
        const proxiedMockPoolAddress = await addressesProvider.getPool();
        const proxiedMockPool = await (0, deploy_v3_1.getMockPool)(proxiedMockPoolAddress);
        (0, chai_1.expect)(await proxiedMockPool.addReserveToReservesList(MKR_ADDRESS));
        (0, chai_1.expect)(await proxiedMockPool.addReserveToReservesList(ETH_ADDRESS));
        (0, chai_1.expect)(await helpersContract.getAllReservesTokens()).to.be.eql([
            ['MKR', MKR_ADDRESS],
            ['ETH', ETH_ADDRESS],
        ]);
    });
});
