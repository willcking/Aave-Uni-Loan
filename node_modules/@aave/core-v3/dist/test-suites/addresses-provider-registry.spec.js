"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const types_1 = require("../helpers/types");
const make_suite_1 = require("./helpers/make-suite");
const deploy_v3_1 = require("@aave/deploy-v3");
(0, make_suite_1.makeSuite)('AddressesProviderRegistry', (testEnv) => {
    const NEW_ADDRESSES_PROVIDER_ID_2 = 2;
    const NEW_ADDRESSES_PROVIDER_ID_3 = 3;
    const NEW_ADDRESSES_PROVIDER_ADDRESS = deploy_v3_1.ONE_ADDRESS;
    const { INVALID_ADDRESSES_PROVIDER_ID, ADDRESSES_PROVIDER_NOT_REGISTERED, ADDRESSES_PROVIDER_ALREADY_ADDED, } = types_1.ProtocolErrors;
    it('Checks the addresses provider is added to the registry', async () => {
        const { addressesProvider, registry } = testEnv;
        const providers = await registry.getAddressesProvidersList();
        (0, chai_1.expect)(providers.length).to.be.equal(1, 'Invalid length of the addresses providers list');
        (0, chai_1.expect)(providers[0].toString()).to.be.equal(addressesProvider.address, 'Invalid addresses provider added to the list');
    });
    it('Tries to register an addresses provider with id 0 (revert expected)', async () => {
        const { registry } = testEnv;
        await (0, chai_1.expect)(registry.registerAddressesProvider(NEW_ADDRESSES_PROVIDER_ADDRESS, '0')).to.be.revertedWith(INVALID_ADDRESSES_PROVIDER_ID);
    });
    it('Registers a mock addresses provider', async () => {
        const { registry } = testEnv;
        const providersBefore = await registry.getAddressesProvidersList();
        await (0, chai_1.expect)(registry.registerAddressesProvider(NEW_ADDRESSES_PROVIDER_ADDRESS, NEW_ADDRESSES_PROVIDER_ID_2))
            .to.emit(registry, 'AddressesProviderRegistered')
            .withArgs(NEW_ADDRESSES_PROVIDER_ADDRESS, NEW_ADDRESSES_PROVIDER_ID_2);
        (0, chai_1.expect)(await registry.getAddressesProviderIdByAddress(NEW_ADDRESSES_PROVIDER_ADDRESS)).to.be.eq(NEW_ADDRESSES_PROVIDER_ID_2);
        const providersAfter = await registry.getAddressesProvidersList();
        (0, chai_1.expect)(providersAfter.length).to.be.equal(providersBefore.length + 1, 'Invalid length of the addresses providers list');
        (0, chai_1.expect)(providersAfter[1].toString()).to.be.equal(NEW_ADDRESSES_PROVIDER_ADDRESS, 'Invalid addresses provider added to the list');
        (0, chai_1.expect)(await registry.getAddressesProviderAddressById(NEW_ADDRESSES_PROVIDER_ID_2)).to.be.equal(NEW_ADDRESSES_PROVIDER_ADDRESS, 'Invalid update of id mapping');
    });
    it('Registers users[2] as another addresses provider', async () => {
        const { users, registry } = testEnv;
        // Simulating an addresses provider using the users[2] wallet address
        await (0, chai_1.expect)(registry.registerAddressesProvider(users[2].address, NEW_ADDRESSES_PROVIDER_ID_3))
            .to.emit(registry, 'AddressesProviderRegistered')
            .withArgs(users[2].address, NEW_ADDRESSES_PROVIDER_ID_3);
        const providers = await registry.getAddressesProvidersList();
        (0, chai_1.expect)(providers.length).to.be.equal(NEW_ADDRESSES_PROVIDER_ID_3, 'Invalid length of the addresses providers list');
        (0, chai_1.expect)(providers[2].toString()).to.be.equal(users[2].address, 'Invalid addresses provider added to the list');
    });
    it('Removes the mock addresses provider', async () => {
        const { users, registry, addressesProvider } = testEnv;
        const providersBefore = await registry.getAddressesProvidersList();
        (0, chai_1.expect)(await registry.getAddressesProviderIdByAddress(NEW_ADDRESSES_PROVIDER_ADDRESS)).to.be.equal(NEW_ADDRESSES_PROVIDER_ID_2);
        await (0, chai_1.expect)(registry.unregisterAddressesProvider(NEW_ADDRESSES_PROVIDER_ADDRESS))
            .to.emit(registry, 'AddressesProviderUnregistered')
            .withArgs(NEW_ADDRESSES_PROVIDER_ADDRESS, NEW_ADDRESSES_PROVIDER_ID_2);
        const providersAfter = await registry.getAddressesProvidersList();
        (0, chai_1.expect)(providersAfter.length).to.be.equal(providersBefore.length - 1, 'Invalid length of the addresses providers list');
        (0, chai_1.expect)(providersAfter[0].toString()).to.be.equal(addressesProvider.address, 'Invalid addresses provider added to the list');
    });
    it('Tries to remove an already unregistered addressesProvider (revert expected)', async () => {
        const { users, registry } = testEnv;
        await (0, chai_1.expect)(registry.unregisterAddressesProvider(NEW_ADDRESSES_PROVIDER_ADDRESS)).to.be.revertedWith(ADDRESSES_PROVIDER_NOT_REGISTERED);
    });
    it('Tries to add an already registered addressesProvider with a different id (revert expected)', async () => {
        const { registry, addressesProvider } = testEnv;
        const id = await registry.getAddressesProviderIdByAddress(addressesProvider.address);
        (0, chai_1.expect)(id).not.to.be.eq(0);
        const providersBefore = await registry.getAddressesProvidersList();
        await (0, chai_1.expect)(registry.registerAddressesProvider(addressesProvider.address, NEW_ADDRESSES_PROVIDER_ID_2)).to.be.revertedWith(ADDRESSES_PROVIDER_ALREADY_ADDED);
        const providersAfter = await registry.getAddressesProvidersList();
        (0, chai_1.expect)(await registry.getAddressesProviderIdByAddress(addressesProvider.address)).to.be.eq(id);
        (0, chai_1.expect)(providersAfter.length).to.be.equal(providersBefore.length, 'Invalid length of the addresses providers list');
        (0, chai_1.expect)(providersAfter[0].toString()).to.be.equal(addressesProvider.address, 'Invalid addresses provider added to the list');
    });
    it('Tries to add an addressesProvider with an already used id (revert expected)', async () => {
        const { users, registry, addressesProvider } = testEnv;
        const id = await registry.getAddressesProviderIdByAddress(addressesProvider.address);
        (0, chai_1.expect)(id).not.to.be.eq(0);
        // Simulating an addresses provider using the users[5] wallet address
        await (0, chai_1.expect)(registry.registerAddressesProvider(users[5].address, id)).to.be.revertedWith(types_1.ProtocolErrors.INVALID_ADDRESSES_PROVIDER_ID);
        const providers = await registry.getAddressesProvidersList();
        const idMap = {};
        for (let i = 0; i < providers.length; i++) {
            const id = (await registry.getAddressesProviderIdByAddress(providers[i])).toNumber();
            if (id > 0) {
                if (idMap[id] == undefined) {
                    idMap[id] = true;
                }
                else {
                    (0, chai_1.expect)(false, 'Duplicate ids').to.be.true;
                }
            }
        }
    });
    it('Reregisters the mock addresses provider after it being removed', async () => {
        const { registry } = testEnv;
        const providersBefore = await registry.getAddressesProvidersList();
        await (0, chai_1.expect)(registry.registerAddressesProvider(NEW_ADDRESSES_PROVIDER_ADDRESS, NEW_ADDRESSES_PROVIDER_ID_2))
            .to.emit(registry, 'AddressesProviderRegistered')
            .withArgs(NEW_ADDRESSES_PROVIDER_ADDRESS, NEW_ADDRESSES_PROVIDER_ID_2);
        (0, chai_1.expect)(await registry.getAddressesProviderIdByAddress(NEW_ADDRESSES_PROVIDER_ADDRESS)).to.be.eq(NEW_ADDRESSES_PROVIDER_ID_2);
        const providersAfter = await registry.getAddressesProvidersList();
        (0, chai_1.expect)(providersAfter.length).to.be.equal(providersBefore.length + 1, 'Invalid length of the addresses providers list');
        (0, chai_1.expect)(providersAfter[providersAfter.length - 1].toString()).to.be.equal(NEW_ADDRESSES_PROVIDER_ADDRESS, 'Invalid addresses provider added to the list');
        (0, chai_1.expect)(await registry.getAddressesProviderAddressById(NEW_ADDRESSES_PROVIDER_ID_2)).to.be.equal(NEW_ADDRESSES_PROVIDER_ADDRESS, 'Invalid update of id mapping');
    });
    it('Removes the last addresses provider', async () => {
        const { registry, addressesProvider } = testEnv;
        const providersBefore = await registry.getAddressesProvidersList();
        const providerToRemove = providersBefore[providersBefore.length - 1];
        const providerToRemoveId = await registry.getAddressesProviderIdByAddress(providerToRemove);
        await (0, chai_1.expect)(registry.unregisterAddressesProvider(providerToRemove))
            .to.emit(registry, 'AddressesProviderUnregistered')
            .withArgs(providerToRemove, providerToRemoveId);
        const providersAfter = await registry.getAddressesProvidersList();
        (0, chai_1.expect)(providersAfter.length).to.be.equal(providersBefore.length - 1, 'Invalid length of the addresses providers list');
        (0, chai_1.expect)(providersAfter[0].toString()).to.be.equal(addressesProvider.address, 'Invalid addresses provider added to the list');
    });
});
