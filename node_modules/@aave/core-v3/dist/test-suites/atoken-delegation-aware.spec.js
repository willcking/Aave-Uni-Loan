"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const constants_1 = require("../helpers/constants");
const types_1 = require("../helpers/types");
const make_suite_1 = require("./helpers/make-suite");
const contract_deployments_1 = require("@aave/deploy-v3/dist/helpers/contract-deployments");
(0, make_suite_1.makeSuite)('AToken: DelegationAwareAToken', (testEnv) => {
    let delegationAToken = {};
    let delegationERC20 = {};
    it('Deploys a new MintableDelegationERC20 and a DelegationAwareAToken', async () => {
        const { pool } = testEnv;
        delegationERC20 = await (0, contract_deployments_1.deployMintableDelegationERC20)(['DEL', 'DEL', '18']);
        delegationAToken = await (0, contract_deployments_1.deployDelegationAwareAToken)([
            pool.address,
            delegationERC20.address,
            constants_1.ZERO_ADDRESS,
            constants_1.ZERO_ADDRESS,
            'aDEL',
            'aDEL',
        ]);
    });
    it('Tries to delegate with the caller not being the Aave admin (revert expected)', async () => {
        const { users } = testEnv;
        await (0, chai_1.expect)(delegationAToken.connect(users[1].signer).delegateUnderlyingTo(users[2].address)).to.be.revertedWith(types_1.ProtocolErrors.CALLER_NOT_POOL_ADMIN);
    });
    it('Delegates to user 2', async () => {
        const { users } = testEnv;
        await (0, chai_1.expect)(delegationAToken.delegateUnderlyingTo(users[2].address))
            .to.emit(delegationAToken, 'DelegateUnderlyingTo')
            .withArgs(users[2].address);
        const delegateeAddress = await delegationERC20.delegatee();
        (0, chai_1.expect)(delegateeAddress).to.be.equal(users[2].address);
    });
});
