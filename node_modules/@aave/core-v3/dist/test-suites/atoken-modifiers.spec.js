"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const types_1 = require("../helpers/types");
const make_suite_1 = require("./helpers/make-suite");
(0, make_suite_1.makeSuite)('AToken: Modifiers', (testEnv) => {
    const { CALLER_MUST_BE_POOL } = types_1.ProtocolErrors;
    it('Tries to invoke mint not being the Pool (revert expected)', async () => {
        const { deployer, aDai } = testEnv;
        await (0, chai_1.expect)(aDai.mint(deployer.address, deployer.address, '1', '1')).to.be.revertedWith(CALLER_MUST_BE_POOL);
    });
    it('Tries to invoke burn not being the Pool (revert expected)', async () => {
        const { deployer, aDai } = testEnv;
        await (0, chai_1.expect)(aDai.burn(deployer.address, deployer.address, '1', '1')).to.be.revertedWith(CALLER_MUST_BE_POOL);
    });
    it('Tries to invoke transferOnLiquidation not being the Pool (revert expected)', async () => {
        const { deployer, users, aDai } = testEnv;
        await (0, chai_1.expect)(aDai.transferOnLiquidation(deployer.address, users[0].address, '1')).to.be.revertedWith(CALLER_MUST_BE_POOL);
    });
    it('Tries to invoke transferUnderlyingTo not being the Pool (revert expected)', async () => {
        const { deployer, aDai } = testEnv;
        await (0, chai_1.expect)(aDai.transferUnderlyingTo(deployer.address, '1')).to.be.revertedWith(CALLER_MUST_BE_POOL);
    });
});
