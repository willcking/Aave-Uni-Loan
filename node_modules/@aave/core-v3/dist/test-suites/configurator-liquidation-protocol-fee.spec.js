"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const ethers_1 = require("ethers");
const constants_1 = require("../helpers/constants");
const types_1 = require("../helpers/types");
const make_suite_1 = require("./helpers/make-suite");
(0, make_suite_1.makeSuite)('PoolConfigurator: Liquidation Protocol Fee', (testEnv) => {
    const { INVALID_LIQUIDATION_PROTOCOL_FEE } = types_1.ProtocolErrors;
    before(async () => {
        const { weth, pool, dai, usdc, faucetMintable, deployer } = testEnv;
        const mintedAmount = ethers_1.utils.parseEther('1000000000');
        await faucetMintable.mint(dai.address, deployer.address, mintedAmount);
        await faucetMintable.mint(weth.address, deployer.address, mintedAmount);
        await faucetMintable.mint(usdc.address, deployer.address, mintedAmount);
        await dai.approve(pool.address, constants_1.MAX_UINT_AMOUNT);
        await weth.approve(pool.address, constants_1.MAX_UINT_AMOUNT);
        await usdc.approve(pool.address, constants_1.MAX_UINT_AMOUNT);
    });
    it('Reserves should initially have protocol liquidation fee set to 0', async () => {
        const { dai, usdc, helpersContract } = testEnv;
        const usdcLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(usdc.address);
        const daiLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(dai.address);
        (0, chai_1.expect)(usdcLiquidationProtocolFee).to.be.equal('0');
        (0, chai_1.expect)(daiLiquidationProtocolFee).to.be.equal('0');
    });
    it('Sets the protocol liquidation fee to 1000 (10.00%)', async () => {
        const { configurator, dai, usdc, helpersContract } = testEnv;
        const oldUsdcLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(usdc.address);
        const oldDaiLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(dai.address);
        const liquidationProtocolFee = 1000;
        await (0, chai_1.expect)(configurator.setLiquidationProtocolFee(usdc.address, liquidationProtocolFee))
            .to.emit(configurator, 'LiquidationProtocolFeeChanged')
            .withArgs(usdc.address, oldUsdcLiquidationProtocolFee, liquidationProtocolFee);
        await (0, chai_1.expect)(configurator.setLiquidationProtocolFee(dai.address, liquidationProtocolFee))
            .to.emit(configurator, 'LiquidationProtocolFeeChanged')
            .withArgs(dai.address, oldDaiLiquidationProtocolFee, liquidationProtocolFee);
        const usdcLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(usdc.address);
        const daiLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(dai.address);
        (0, chai_1.expect)(usdcLiquidationProtocolFee).to.be.equal(liquidationProtocolFee);
        (0, chai_1.expect)(daiLiquidationProtocolFee).to.be.equal(liquidationProtocolFee);
    });
    it('Sets the protocol liquidation fee to 10000 (100.00%) equal to PERCENTAGE_FACTOR', async () => {
        const { configurator, dai, usdc, helpersContract } = testEnv;
        const oldUsdcLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(usdc.address);
        const oldDaiLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(dai.address);
        const liquidationProtocolFee = 10000;
        await (0, chai_1.expect)(configurator.setLiquidationProtocolFee(usdc.address, liquidationProtocolFee))
            .to.emit(configurator, 'LiquidationProtocolFeeChanged')
            .withArgs(usdc.address, oldUsdcLiquidationProtocolFee, liquidationProtocolFee);
        await (0, chai_1.expect)(configurator.setLiquidationProtocolFee(dai.address, liquidationProtocolFee))
            .to.emit(configurator, 'LiquidationProtocolFeeChanged')
            .withArgs(dai.address, oldDaiLiquidationProtocolFee, liquidationProtocolFee);
        const usdcLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(usdc.address);
        const daiLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(dai.address);
        (0, chai_1.expect)(usdcLiquidationProtocolFee).to.be.equal(liquidationProtocolFee);
        (0, chai_1.expect)(daiLiquidationProtocolFee).to.be.equal(liquidationProtocolFee);
    });
    it('Tries to set the protocol liquidation fee to 10001 (100.01%) > PERCENTAGE_FACTOR (revert expected)', async () => {
        const { configurator, dai, usdc } = testEnv;
        const liquidationProtocolFee = 10001;
        (0, chai_1.expect)(configurator.setLiquidationProtocolFee(usdc.address, liquidationProtocolFee)).to.be.revertedWith(INVALID_LIQUIDATION_PROTOCOL_FEE);
        (0, chai_1.expect)(configurator.setLiquidationProtocolFee(dai.address, liquidationProtocolFee)).to.be.revertedWith(INVALID_LIQUIDATION_PROTOCOL_FEE);
    });
});
