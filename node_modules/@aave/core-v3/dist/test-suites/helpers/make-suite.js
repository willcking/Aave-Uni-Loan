"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeSuite = exports.initializeMakeSuite = void 0;
const contract_getters_1 = require("@aave/deploy-v3/dist/helpers/contract-getters");
const deploy_v3_1 = require("@aave/deploy-v3");
const tenderly_utils_1 = require("../../helpers/tenderly-utils");
let HardhatSnapshotId = '0x1';
const setHardhatSnapshotId = (id) => {
    HardhatSnapshotId = id;
};
const testEnv = {
    deployer: {},
    poolAdmin: {},
    emergencyAdmin: {},
    riskAdmin: {},
    users: [],
    pool: {},
    configurator: {},
    helpersContract: {},
    oracle: {},
    aaveOracle: {},
    weth: {},
    aWETH: {},
    faucetMintable: {},
    dai: {},
    aDai: {},
    variableDebtDai: {},
    stableDebtDai: {},
    aUsdc: {},
    usdc: {},
    aave: {},
    addressesProvider: {},
    registry: {},
    aclManager: {},
};
async function initializeMakeSuite() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const [_deployer, ...restSigners] = await (0, deploy_v3_1.getEthersSigners)();
    const deployer = {
        address: await _deployer.getAddress(),
        signer: _deployer,
    };
    for (const signer of restSigners) {
        testEnv.users.push({
            signer,
            address: await signer.getAddress(),
        });
    }
    testEnv.deployer = deployer;
    testEnv.poolAdmin = deployer;
    testEnv.emergencyAdmin = testEnv.users[1];
    testEnv.riskAdmin = testEnv.users[2];
    testEnv.pool = await (0, contract_getters_1.getPool)();
    testEnv.configurator = await (0, contract_getters_1.getPoolConfiguratorProxy)();
    testEnv.addressesProvider = await (0, contract_getters_1.getPoolAddressesProvider)();
    testEnv.registry = await (0, contract_getters_1.getPoolAddressesProviderRegistry)();
    testEnv.aclManager = await (0, contract_getters_1.getACLManager)();
    testEnv.oracle = await (0, deploy_v3_1.deployPriceOracle)();
    testEnv.aaveOracle = await (0, contract_getters_1.getAaveOracle)();
    // Setup Fallback Oracle
    await (0, deploy_v3_1.waitForTx)(await testEnv.aaveOracle.setFallbackOracle(testEnv.oracle.address));
    testEnv.helpersContract = await (0, contract_getters_1.getAaveProtocolDataProvider)();
    const allTokens = await testEnv.helpersContract.getAllATokens();
    const aDaiAddress = (_a = allTokens.find((aToken) => aToken.symbol.includes('DAI'))) === null || _a === void 0 ? void 0 : _a.tokenAddress;
    const aUsdcAddress = (_b = allTokens.find((aToken) => aToken.symbol.includes('USDC'))) === null || _b === void 0 ? void 0 : _b.tokenAddress;
    const aWEthAddress = (_c = allTokens.find((aToken) => aToken.symbol.includes('WETH'))) === null || _c === void 0 ? void 0 : _c.tokenAddress;
    const aAaveAddress = (_d = allTokens.find((aToken) => aToken.symbol.includes('AAVE'))) === null || _d === void 0 ? void 0 : _d.tokenAddress;
    const reservesTokens = await testEnv.helpersContract.getAllReservesTokens();
    const daiAddress = (_e = reservesTokens.find((token) => token.symbol === 'DAI')) === null || _e === void 0 ? void 0 : _e.tokenAddress;
    const { variableDebtTokenAddress: variableDebtDaiAddress, stableDebtTokenAddress: stableDebtDaiAddress, } = await testEnv.helpersContract.getReserveTokensAddresses(daiAddress || '');
    const usdcAddress = (_f = reservesTokens.find((token) => token.symbol === 'USDC')) === null || _f === void 0 ? void 0 : _f.tokenAddress;
    const aaveAddress = (_g = reservesTokens.find((token) => token.symbol === 'AAVE')) === null || _g === void 0 ? void 0 : _g.tokenAddress;
    const wethAddress = (_h = reservesTokens.find((token) => token.symbol === 'WETH')) === null || _h === void 0 ? void 0 : _h.tokenAddress;
    if (!aDaiAddress || !aWEthAddress) {
        throw 'Missing mandatory atokens';
    }
    if (!daiAddress || !usdcAddress || !aaveAddress || !wethAddress) {
        throw 'Missing mandatory tokens';
    }
    testEnv.faucetMintable = await (0, deploy_v3_1.getFaucet)();
    testEnv.aDai = await (0, contract_getters_1.getAToken)(aDaiAddress);
    testEnv.variableDebtDai = await (0, contract_getters_1.getVariableDebtToken)(variableDebtDaiAddress);
    testEnv.stableDebtDai = await (0, contract_getters_1.getStableDebtToken)(stableDebtDaiAddress);
    testEnv.aUsdc = await (0, contract_getters_1.getAToken)(aUsdcAddress);
    testEnv.aWETH = await (0, contract_getters_1.getAToken)(aWEthAddress);
    testEnv.aAave = await (0, contract_getters_1.getAToken)(aAaveAddress);
    testEnv.dai = await (0, contract_getters_1.getMintableERC20)(daiAddress);
    testEnv.aave = await (0, contract_getters_1.getMintableERC20)(aaveAddress);
    testEnv.usdc = await (0, contract_getters_1.getMintableERC20)(usdcAddress);
    testEnv.weth = await (0, contract_getters_1.getWETHMocked)(wethAddress);
    // Setup admins
    await (0, deploy_v3_1.waitForTx)(await testEnv.aclManager.addRiskAdmin(testEnv.riskAdmin.address));
    await (0, deploy_v3_1.waitForTx)(await testEnv.aclManager.addEmergencyAdmin(testEnv.emergencyAdmin.address));
}
exports.initializeMakeSuite = initializeMakeSuite;
const setSnapshot = async () => {
    if ((0, tenderly_utils_1.usingTenderly)()) {
        setHardhatSnapshotId((await hre.tenderlyNetwork.getHead()) || '0x1');
        return;
    }
    setHardhatSnapshotId(await (0, deploy_v3_1.evmSnapshot)());
};
const revertHead = async () => {
    if ((0, tenderly_utils_1.usingTenderly)()) {
        await hre.tenderlyNetwork.setHead(HardhatSnapshotId);
        return;
    }
    await (0, deploy_v3_1.evmRevert)(HardhatSnapshotId);
};
function makeSuite(name, tests) {
    describe(name, () => {
        before(async () => {
            await setSnapshot();
        });
        tests(testEnv);
        after(async () => {
            await revertHead();
        });
    });
}
exports.makeSuite = makeSuite;
