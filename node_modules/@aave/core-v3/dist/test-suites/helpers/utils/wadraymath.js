"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_1 = require("@ethersproject/bignumber");
const constants_1 = require("../../../helpers/constants");
bignumber_1.BigNumber.prototype.ray = () => bignumber_1.BigNumber.from(constants_1.RAY);
bignumber_1.BigNumber.prototype.wad = () => bignumber_1.BigNumber.from(constants_1.WAD);
bignumber_1.BigNumber.prototype.halfRay = () => bignumber_1.BigNumber.from(constants_1.HALF_RAY);
bignumber_1.BigNumber.prototype.halfWad = () => bignumber_1.BigNumber.from(constants_1.HALF_WAD);
bignumber_1.BigNumber.prototype.halfPercentage = () => bignumber_1.BigNumber.from(constants_1.HALF_PERCENTAGE);
bignumber_1.BigNumber.prototype.percentageFactor = () => bignumber_1.BigNumber.from(constants_1.PERCENTAGE_FACTOR);
bignumber_1.BigNumber.prototype.wadMul = function (other) {
    return this.halfWad().add(this.mul(other)).div(this.wad());
};
bignumber_1.BigNumber.prototype.wadDiv = function (other) {
    const halfOther = other.div(2);
    return halfOther.add(this.mul(this.wad())).div(other);
};
bignumber_1.BigNumber.prototype.rayMul = function (other) {
    return this.halfRay().add(this.mul(other)).div(this.ray());
};
bignumber_1.BigNumber.prototype.rayDiv = function (other) {
    const halfOther = other.div(2);
    return halfOther.add(this.mul(this.ray())).div(other);
};
bignumber_1.BigNumber.prototype.percentMul = function (bps) {
    return this.halfPercentage().add(this.mul(bps)).div(constants_1.PERCENTAGE_FACTOR);
};
bignumber_1.BigNumber.prototype.percentDiv = function (bps) {
    const halfBps = bignumber_1.BigNumber.from(bps).div(2);
    return halfBps.add(this.mul(constants_1.PERCENTAGE_FACTOR)).div(bps);
};
bignumber_1.BigNumber.prototype.rayToWad = function () {
    const halfRatio = bignumber_1.BigNumber.from(constants_1.WAD_RAY_RATIO).div(2);
    return halfRatio.add(this).div(constants_1.WAD_RAY_RATIO);
};
bignumber_1.BigNumber.prototype.wadToRay = function () {
    return this.mul(constants_1.WAD_RAY_RATIO);
};
bignumber_1.BigNumber.prototype.negated = function () {
    return this.mul(-1);
};
