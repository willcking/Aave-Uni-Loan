"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const ethers_1 = require("ethers");
const constants_1 = require("../helpers/constants");
const contracts_helpers_1 = require("../helpers/contracts-helpers");
const types_1 = require("../helpers/types");
const make_suite_1 = require("./helpers/make-suite");
require("./helpers/utils/wadraymath");
const types_2 = require("../types");
const units_1 = require("@ethersproject/units");
const deploy_v3_1 = require("@aave/deploy-v3");
(0, make_suite_1.makeSuite)('Pool: Simple FlashLoan', (testEnv) => {
    let _mockFlashLoanSimpleReceiver = {};
    const { ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE, INVALID_FLASHLOAN_EXECUTOR_RETURN, FLASHLOAN_DISABLED, } = types_1.ProtocolErrors;
    const TOTAL_PREMIUM = 9;
    const PREMIUM_TO_PROTOCOL = 3000;
    before(async () => {
        const { addressesProvider, deployer } = testEnv;
        _mockFlashLoanSimpleReceiver = await new types_2.MockFlashLoanSimpleReceiver__factory(deployer.signer).deploy(addressesProvider.address);
    });
    it('Configurator sets total premium = 9 bps, premium to protocol = 30%', async () => {
        const { configurator, pool } = testEnv;
        await configurator.updateFlashloanPremiumTotal(TOTAL_PREMIUM);
        await configurator.updateFlashloanPremiumToProtocol(PREMIUM_TO_PROTOCOL);
        (0, chai_1.expect)(await pool.FLASHLOAN_PREMIUM_TOTAL()).to.be.equal(TOTAL_PREMIUM);
        (0, chai_1.expect)(await pool.FLASHLOAN_PREMIUM_TO_PROTOCOL()).to.be.equal(PREMIUM_TO_PROTOCOL);
    });
    it('Deposits WETH into the reserve', async () => {
        const { pool, weth, aave, dai, faucetMintable, deployer } = testEnv;
        const userAddress = await pool.signer.getAddress();
        const amountToDeposit = ethers_1.ethers.utils.parseEther('1');
        await faucetMintable.mint(weth.address, deployer.address, amountToDeposit);
        await weth.approve(pool.address, constants_1.MAX_UINT_AMOUNT);
        await pool.deposit(weth.address, amountToDeposit, userAddress, '0');
        await faucetMintable.mint(aave.address, deployer.address, amountToDeposit);
        await aave.approve(pool.address, constants_1.MAX_UINT_AMOUNT);
        await pool.deposit(aave.address, amountToDeposit, userAddress, '0');
        await faucetMintable.mint(dai.address, deployer.address, amountToDeposit);
        await dai.approve(pool.address, constants_1.MAX_UINT_AMOUNT);
        await pool.deposit(dai.address, amountToDeposit, userAddress, '0');
    });
    it('Takes simple WETH flash loan and returns the funds correctly', async () => {
        var _a, _b, _c, _d, _e, _f, _g;
        const { pool, helpersContract, weth, aWETH } = testEnv;
        const wethFlashBorrowedAmount = ethers_1.ethers.utils.parseEther('0.8');
        const wethTotalFees = wethFlashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
        const wethFeesToProtocol = wethTotalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
        const wethFeesToLp = wethTotalFees.sub(wethFeesToProtocol);
        const wethLiquidityIndexAdded = wethFeesToLp
            .mul(ethers_1.BigNumber.from(10).pow(27))
            .div(await aWETH.totalSupply());
        let wethReserveData = await helpersContract.getReserveData(weth.address);
        const wethLiquidityIndexBefore = wethReserveData.liquidityIndex;
        const wethTotalLiquidityBefore = wethReserveData.totalAToken;
        const wethReservesBefore = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());
        const tx = await (0, deploy_v3_1.waitForTx)(await pool.flashLoanSimple(_mockFlashLoanSimpleReceiver.address, weth.address, wethFlashBorrowedAmount, '0x10', '0'));
        await pool.mintToTreasury([weth.address]);
        wethReserveData = await helpersContract.getReserveData(weth.address);
        const wethCurrentLiquidityRate = wethReserveData.liquidityRate;
        const wethCurrentLiquidityIndex = wethReserveData.liquidityIndex;
        const wethTotalLiquidityAfter = wethReserveData.totalAToken;
        const wethReservesAfter = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());
        (0, chai_1.expect)(wethTotalLiquidityBefore.add(wethTotalFees)).to.be.closeTo(wethTotalLiquidityAfter, 2);
        (0, chai_1.expect)(wethCurrentLiquidityRate).to.be.equal(0);
        (0, chai_1.expect)(wethCurrentLiquidityIndex).to.be.equal(wethLiquidityIndexBefore.add(wethLiquidityIndexAdded));
        (0, chai_1.expect)(wethReservesAfter).to.be.equal(wethReservesBefore.add(wethFeesToProtocol));
        // Check event values for `ReserveDataUpdated`
        const reserveDataUpdatedEvents = (_a = tx.events) === null || _a === void 0 ? void 0 : _a.filter(({ event }) => event === 'ReserveDataUpdated');
        for (const reserveDataUpdatedEvent of reserveDataUpdatedEvents) {
            const reserveData = await helpersContract.getReserveData((_b = reserveDataUpdatedEvent.args) === null || _b === void 0 ? void 0 : _b.reserve);
            (0, chai_1.expect)(reserveData.liquidityRate).to.be.eq((_c = reserveDataUpdatedEvent.args) === null || _c === void 0 ? void 0 : _c.liquidityRate);
            (0, chai_1.expect)(reserveData.stableBorrowRate).to.be.eq((_d = reserveDataUpdatedEvent.args) === null || _d === void 0 ? void 0 : _d.stableBorrowRate);
            (0, chai_1.expect)(reserveData.variableBorrowRate).to.be.eq((_e = reserveDataUpdatedEvent.args) === null || _e === void 0 ? void 0 : _e.variableBorrowRate);
            (0, chai_1.expect)(reserveData.liquidityIndex).to.be.eq((_f = reserveDataUpdatedEvent.args) === null || _f === void 0 ? void 0 : _f.liquidityIndex);
            (0, chai_1.expect)(reserveData.variableBorrowIndex).to.be.eq((_g = reserveDataUpdatedEvent.args) === null || _g === void 0 ? void 0 : _g.variableBorrowIndex);
        }
    });
    it('Takes a simple ETH flashloan as big as the available liquidity', async () => {
        const { pool, helpersContract, weth, aWETH } = testEnv;
        let reserveData = await helpersContract.getReserveData(weth.address);
        const totalLiquidityBefore = reserveData.totalAToken;
        const flashBorrowedAmount = totalLiquidityBefore;
        const totalFees = flashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
        const feesToProtocol = totalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
        const feesToLp = totalFees.sub(feesToProtocol);
        const liquidityIndexBefore = reserveData.liquidityIndex;
        const liquidityIndexAdded = feesToLp
            .mul(ethers_1.BigNumber.from(10).pow(27))
            .div((await aWETH.totalSupply()).toString())
            .mul(liquidityIndexBefore)
            .div(ethers_1.BigNumber.from(10).pow(27));
        const reservesBefore = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());
        const txResult = await pool.flashLoanSimple(_mockFlashLoanSimpleReceiver.address, weth.address, flashBorrowedAmount, '0x10', '0');
        await pool.mintToTreasury([weth.address]);
        reserveData = await helpersContract.getReserveData(weth.address);
        const currentLiquidityRate = reserveData.liquidityRate;
        const currentLiquidityIndex = reserveData.liquidityIndex;
        const totalLiquidityAfter = reserveData.totalAToken;
        const reservesAfter = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());
        (0, chai_1.expect)(totalLiquidityBefore.add(totalFees)).to.be.closeTo(totalLiquidityAfter, 2);
        (0, chai_1.expect)(currentLiquidityRate).to.be.equal(0);
        (0, chai_1.expect)(currentLiquidityIndex).to.be.equal(liquidityIndexBefore.add(liquidityIndexAdded));
        (0, chai_1.expect)(reservesAfter.sub(feesToProtocol).mul(liquidityIndexBefore).div(currentLiquidityIndex)).to.be.equal(reservesBefore);
    });
    it('Takes a simple ETH flashloan after flashloaning disabled', async () => {
        const { pool, configurator, helpersContract, weth } = testEnv;
        (0, chai_1.expect)(await configurator.setReserveFlashLoaning(weth.address, false));
        let wethFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(weth.address);
        (0, chai_1.expect)(wethFlashLoanEnabled).to.be.equal(false);
        const wethFlashBorrowedAmount = ethers_1.ethers.utils.parseEther('0.8');
        await (0, chai_1.expect)(pool.flashLoanSimple(_mockFlashLoanSimpleReceiver.address, weth.address, wethFlashBorrowedAmount, '0x10', '0')).to.be.revertedWith(FLASHLOAN_DISABLED);
        (0, chai_1.expect)(await configurator.setReserveFlashLoaning(weth.address, true));
        wethFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(weth.address);
        (0, chai_1.expect)(wethFlashLoanEnabled).to.be.equal(true);
    });
    it('Takes WETH flashloan, does not return the funds (revert expected)', async () => {
        const { pool, weth, users } = testEnv;
        const caller = users[1];
        await _mockFlashLoanSimpleReceiver.setFailExecutionTransfer(true);
        await (0, chai_1.expect)(pool
            .connect(caller.signer)
            .flashLoanSimple(_mockFlashLoanSimpleReceiver.address, weth.address, ethers_1.ethers.utils.parseEther('0.8'), '0x10', '0')).to.be.reverted;
    });
    it('Takes WETH flashloan, simulating a receiver as EOA (revert expected)', async () => {
        const { pool, weth, users } = testEnv;
        const caller = users[1];
        await _mockFlashLoanSimpleReceiver.setFailExecutionTransfer(true);
        await _mockFlashLoanSimpleReceiver.setSimulateEOA(true);
        await (0, chai_1.expect)(pool
            .connect(caller.signer)
            .flashLoanSimple(_mockFlashLoanSimpleReceiver.address, weth.address, ethers_1.ethers.utils.parseEther('0.8'), '0x10', '0')).to.be.revertedWith(INVALID_FLASHLOAN_EXECUTOR_RETURN);
    });
    it('Tries to take a flashloan that is bigger than the available liquidity (revert expected)', async () => {
        const { pool, weth, users } = testEnv;
        const caller = users[1];
        await (0, chai_1.expect)(pool.connect(caller.signer).flashLoanSimple(_mockFlashLoanSimpleReceiver.address, weth.address, '1004415000000000000', //slightly higher than the available liquidity
        '0x10', '0'), ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE).to.be.reverted;
    });
    it('Tries to take a flashloan using a non contract address as receiver (revert expected)', async () => {
        const { pool, deployer, weth, users } = testEnv;
        const caller = users[1];
        await (0, chai_1.expect)(pool.flashLoanSimple(deployer.address, weth.address, '1000000000000000000', '0x10', '0')).to.be.reverted;
    });
    it('Deposits USDC into the reserve', async () => {
        const { usdc, pool, deployer, faucetMintable } = testEnv;
        const userAddress = await pool.signer.getAddress();
        await faucetMintable.mint(usdc.address, deployer.address, await (0, contracts_helpers_1.convertToCurrencyDecimals)(usdc.address, '1000'));
        await usdc.approve(pool.address, constants_1.MAX_UINT_AMOUNT);
        const amountToDeposit = await (0, contracts_helpers_1.convertToCurrencyDecimals)(usdc.address, '1000');
        await pool.deposit(usdc.address, amountToDeposit, userAddress, '0');
    });
    it('Takes out a 500 USDC flashloan, returns the funds correctly', async () => {
        const { usdc, aUsdc, pool, helpersContract, deployer: depositor } = testEnv;
        await _mockFlashLoanSimpleReceiver.setFailExecutionTransfer(false);
        const flashBorrowedAmount = await (0, contracts_helpers_1.convertToCurrencyDecimals)(usdc.address, '500');
        const totalFees = flashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
        const feesToProtocol = totalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
        const feesToLp = totalFees.sub(feesToProtocol);
        const liquidityIndexAdded = feesToLp
            .mul(ethers_1.ethers.BigNumber.from(10).pow(27))
            .div(await aUsdc.totalSupply());
        let reserveData = await helpersContract.getReserveData(usdc.address);
        const liquidityIndexBefore = reserveData.liquidityIndex;
        const totalLiquidityBefore = reserveData.totalAToken;
        const reservesBefore = await aUsdc.balanceOf(await aUsdc.RESERVE_TREASURY_ADDRESS());
        await pool.flashLoanSimple(_mockFlashLoanSimpleReceiver.address, usdc.address, flashBorrowedAmount, '0x10', '0');
        await pool.mintToTreasury([usdc.address]);
        reserveData = await helpersContract.getReserveData(usdc.address);
        const currentLiquidityRate = reserveData.liquidityRate;
        const currentLiquidityIndex = reserveData.liquidityIndex;
        const totalLiquidityAfter = reserveData.totalAToken;
        const reservesAfter = await aUsdc.balanceOf(await aUsdc.RESERVE_TREASURY_ADDRESS());
        (0, chai_1.expect)(totalLiquidityBefore.add(totalFees)).to.be.closeTo(totalLiquidityAfter, 2);
        (0, chai_1.expect)(currentLiquidityRate).to.be.equal(0);
        (0, chai_1.expect)(currentLiquidityIndex).to.be.equal(liquidityIndexBefore.add(liquidityIndexAdded));
        (0, chai_1.expect)(reservesAfter).to.be.equal(reservesBefore.add(feesToProtocol));
    });
    it('Takes out a 500 USDC flashloan with mode = 0, does not return the funds (revert expected)', async () => {
        const { usdc, pool, users } = testEnv;
        const caller = users[2];
        const flashloanAmount = await (0, contracts_helpers_1.convertToCurrencyDecimals)(usdc.address, '500');
        await _mockFlashLoanSimpleReceiver.setFailExecutionTransfer(true);
        await (0, chai_1.expect)(pool
            .connect(caller.signer)
            .flashLoanSimple(_mockFlashLoanSimpleReceiver.address, usdc.address, flashloanAmount, '0x10', '0')).to.be.revertedWith(INVALID_FLASHLOAN_EXECUTOR_RETURN);
    });
    it('Caller deposits 1000 DAI as collateral, Takes a WETH flashloan with mode = 0, does not approve the transfer of the funds', async () => {
        const { dai, pool, weth, users, faucetMintable } = testEnv;
        const caller = users[3];
        await faucetMintable.mint(dai.address, caller.address, await (0, contracts_helpers_1.convertToCurrencyDecimals)(dai.address, '1000'));
        await dai.connect(caller.signer).approve(pool.address, constants_1.MAX_UINT_AMOUNT);
        const amountToDeposit = await (0, contracts_helpers_1.convertToCurrencyDecimals)(dai.address, '1000');
        await pool.connect(caller.signer).deposit(dai.address, amountToDeposit, caller.address, '0');
        const flashAmount = ethers_1.ethers.utils.parseEther('0.8');
        await _mockFlashLoanSimpleReceiver.setFailExecutionTransfer(false);
        await _mockFlashLoanSimpleReceiver.setAmountToApprove(flashAmount.div(2));
        await (0, chai_1.expect)(pool
            .connect(caller.signer)
            .flashLoanSimple(_mockFlashLoanSimpleReceiver.address, weth.address, flashAmount, '0x10', '0')).to.be.reverted;
    });
    it('Check that reentrance borrow within flashloanSimple impacts rates', async () => {
        /**
         * 1. FlashBorrow a tiny bit of DAI
         * 2. As the action in the middle. Borrow ALL the DAI using eth collateral
         * 3. Repay the tiny bit
         * The result should be that the interest rate increase due to higher utilisation.
         */
        const { deployer, pool, dai, aDai, weth, addressesProvider, users: [user], } = testEnv;
        const flashAttacker = await new types_2.FlashloanAttacker__factory(deployer.signer).deploy(addressesProvider.address);
        await flashAttacker.connect(user.signer).supplyAsset(weth.address, (0, units_1.parseEther)('100'));
        const dataBefore = await pool.getReserveData(dai.address);
        const debtToken = types_2.IERC20Detailed__factory.connect(dataBefore.variableDebtTokenAddress, deployer.signer);
        const debtBefore = await debtToken.totalSupply();
        const availableBefore = await dai.balanceOf(aDai.address);
        await pool
            .connect(user.signer)
            .flashLoanSimple(flashAttacker.address, dai.address, (0, units_1.parseUnits)('1', 18), '0x10', 0);
        const dataAfter = await pool.getReserveData(dai.address);
        const debtAfter = await debtToken.totalSupply();
        const availableAfter = await dai.balanceOf(aDai.address);
        // More debt and less available -> higher usage-> rates will increase
        (0, chai_1.expect)(debtAfter).to.be.gt(debtBefore);
        (0, chai_1.expect)(availableAfter).to.be.lt(availableBefore);
        // Premium is added
        (0, chai_1.expect)(dataAfter.liquidityIndex).to.be.gt(dataBefore.liquidityIndex);
        // Rates should have increased
        (0, chai_1.expect)(dataAfter.currentLiquidityRate).to.be.gt(dataBefore.currentLiquidityRate);
        (0, chai_1.expect)(dataAfter.currentVariableBorrowRate).to.be.gt(dataBefore.currentVariableBorrowRate);
    });
});
