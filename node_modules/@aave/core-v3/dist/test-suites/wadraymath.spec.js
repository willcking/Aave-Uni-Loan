"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const bignumber_1 = require("@ethersproject/bignumber");
const constants_1 = require("../helpers/constants");
const types_1 = require("../types");
const signer_1 = require("@aave/deploy-v3/dist/helpers/utilities/signer");
const make_suite_1 = require("./helpers/make-suite");
require("./helpers/utils/wadraymath");
(0, make_suite_1.makeSuite)('WadRayMath', () => {
    let wrapper;
    before('setup', async () => {
        const factory = new types_1.WadRayMathWrapper__factory(await (0, signer_1.getFirstSigner)());
        wrapper = await (await factory.deploy()).deployed();
    });
    it('Plain getters', async () => {
        (0, chai_1.expect)((await wrapper.wad()).toString()).to.be.eq(constants_1.WAD);
        (0, chai_1.expect)((await wrapper.halfWad()).toString()).to.be.eq(constants_1.HALF_WAD);
        (0, chai_1.expect)((await wrapper.ray()).toString()).to.be.eq(constants_1.RAY);
        (0, chai_1.expect)((await wrapper.halfRay()).toString()).to.be.eq(constants_1.HALF_RAY);
    });
    it('wadMul()', async () => {
        const a = bignumber_1.BigNumber.from('134534543232342353231234');
        const b = bignumber_1.BigNumber.from('13265462389132757665657');
        (0, chai_1.expect)(await wrapper.wadMul(a, b)).to.be.eq(a.wadMul(b));
        (0, chai_1.expect)(await wrapper.wadMul(0, b)).to.be.eq('0');
        (0, chai_1.expect)(await wrapper.wadMul(a, 0)).to.be.eq('0');
        const tooLargeA = bignumber_1.BigNumber.from(constants_1.MAX_UINT_AMOUNT).sub(constants_1.HALF_WAD).div(b).add(1);
        await (0, chai_1.expect)(wrapper.wadMul(tooLargeA, b)).to.be.reverted;
    });
    it('wadDiv()', async () => {
        const a = bignumber_1.BigNumber.from('134534543232342353231234');
        const b = bignumber_1.BigNumber.from('13265462389132757665657');
        (0, chai_1.expect)(await wrapper.wadDiv(a, b)).to.be.eq(a.wadDiv(b));
        const halfB = b.div(2);
        const tooLargeA = bignumber_1.BigNumber.from(constants_1.MAX_UINT_AMOUNT).sub(halfB).div(constants_1.WAD).add(1);
        await (0, chai_1.expect)(wrapper.wadDiv(tooLargeA, b)).to.be.reverted;
        await (0, chai_1.expect)(wrapper.wadDiv(a, 0)).to.be.reverted;
    });
    it('rayMul()', async () => {
        const a = bignumber_1.BigNumber.from('134534543232342353231234');
        const b = bignumber_1.BigNumber.from('13265462389132757665657');
        (0, chai_1.expect)(await wrapper.rayMul(a, b)).to.be.eq(a.rayMul(b));
        (0, chai_1.expect)(await wrapper.rayMul(0, b)).to.be.eq('0');
        (0, chai_1.expect)(await wrapper.rayMul(a, 0)).to.be.eq('0');
        const tooLargeA = bignumber_1.BigNumber.from(constants_1.MAX_UINT_AMOUNT).sub(constants_1.HALF_RAY).div(b).add(1);
        await (0, chai_1.expect)(wrapper.rayMul(tooLargeA, b)).to.be.reverted;
    });
    it('rayDiv()', async () => {
        const a = bignumber_1.BigNumber.from('134534543232342353231234');
        const b = bignumber_1.BigNumber.from('13265462389132757665657');
        (0, chai_1.expect)(await wrapper.rayDiv(a, b)).to.be.eq(a.rayDiv(b));
        const halfB = b.div(2);
        const tooLargeA = bignumber_1.BigNumber.from(constants_1.MAX_UINT_AMOUNT).sub(halfB).div(constants_1.RAY).add(1);
        await (0, chai_1.expect)(wrapper.rayDiv(tooLargeA, b)).to.be.reverted;
        await (0, chai_1.expect)(wrapper.rayDiv(a, 0)).to.be.reverted;
    });
    it('rayToWad()', async () => {
        const half = bignumber_1.BigNumber.from(10).pow(9).div(2);
        const a = bignumber_1.BigNumber.from('10').pow(27);
        (0, chai_1.expect)(await wrapper.rayToWad(a)).to.be.eq(a.rayToWad());
        const roundDown = bignumber_1.BigNumber.from('10').pow(27).add(half.sub(1));
        (0, chai_1.expect)(await wrapper.rayToWad(roundDown)).to.be.eq(roundDown.rayToWad());
        const roundUp = bignumber_1.BigNumber.from('10').pow(27).add(half);
        (0, chai_1.expect)(await wrapper.rayToWad(roundUp)).to.be.eq(roundUp.rayToWad());
        const tooLarge = bignumber_1.BigNumber.from(constants_1.MAX_UINT_AMOUNT).sub(half).add(1);
        (0, chai_1.expect)(await wrapper.rayToWad(tooLarge)).to.be.eq(tooLarge.rayToWad());
    });
    it('wadToRay()', async () => {
        const a = bignumber_1.BigNumber.from('10').pow(18);
        (0, chai_1.expect)(await wrapper.wadToRay(a)).to.be.eq(a.wadToRay());
        const ratio = bignumber_1.BigNumber.from(10).pow(9);
        const tooLarge = bignumber_1.BigNumber.from(constants_1.MAX_UINT_AMOUNT).div(ratio).add(1);
        await (0, chai_1.expect)(wrapper.wadToRay(tooLarge)).to.be.reverted;
    });
});
